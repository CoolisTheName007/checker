---Type checking utilities in pure Lua for sandboxes without debug library, inspired by the Sierra scheduler checker module.
-- @usage
-- os.loadAPI('checkerAPI')
-- check=checkerAPI.check
-- function foo(int_or_table,optional_string)
	-- check('number|table,?string',int_or_table,optional_string)
	-- print('All is well')
-- end

-- foo(1)
-- >>All is well
-- foo({},'')
-- >>All is well
-- foo(1,1)
-- >>test.lua:12: arg number 2: 1 of type number is not of type ?string

vars={}
vars.checkers={}
local checkers=vars.checkers

function conforms(t,a)
	return t == "?"
	or (t:sub(1, 1) == "?" and (a==nil or conforms(t:sub(2, -1),a)))
	or type(a) == t
	or (pcall(getmetatable,a) and getmetatable(a) and getmetatable(a).__type == t)
	or (checkers[t] and checkers[t](a))
end

function check(s,...)
	local i=0
	local b
	for d in s:gmatch(',?([^,]*),?') do
		--print(t)
		i=i+1
		b=false
		for t in d:gmatch('|?([^|]*)|?') do
			--print(t)
			if conforms(t,select(i,...)) then b=true break end
		end
		--print('passed')
		if not b then
			error('arg number '..i..':'..tostring(select(i,...)==nil and 'nil' or select(i,...))..' of type '..tostring(type(select(i,...) or nil))..' is not of type '..d,3)
		end
	end
end